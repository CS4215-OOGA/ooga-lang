"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createImportNamespaceSpecifier = exports.createImportDefaultSpecifier = exports.createImportSpecifier = exports.createImportDeclaration = exports.createFunctionDeclaration = exports.createReturnStatement = exports.createVariableDeclaration = exports.createVariableDeclarator = exports.createCallExpression = exports.createIdentifier = exports.createLiteral = void 0;
// Note that typecasting is done on some of the constructed AST nodes because
// the ESTree AST node types are not fully aligned with the actual AST that
// is generated by the Acorn parser. However, the extra/missing properties
// are unused in the Source interpreter/transpiler. As such, we can safely
// ignore their existence to make the typing cleaner. The alternative would
// be to define our own AST node types based off the ESTree AST node types
// and use our custom AST node types everywhere.
var createLiteral = function (value, raw) {
    return {
        type: 'Literal',
        value: value,
        raw: (raw !== null && raw !== void 0 ? raw : typeof value === 'string') ? "\"".concat(value, "\"") : String(value)
    };
};
exports.createLiteral = createLiteral;
var createIdentifier = function (name) {
    return {
        type: 'Identifier',
        name: name
    };
};
exports.createIdentifier = createIdentifier;
var createCallExpression = function (functionName, functionArguments) {
    return {
        type: 'CallExpression',
        callee: (0, exports.createIdentifier)(functionName),
        arguments: functionArguments
        // The 'optional' property is typed in ESTree, but does not exist
        // on SimpleCallExpression nodes in the AST generated by acorn parser.
    };
};
exports.createCallExpression = createCallExpression;
var createVariableDeclarator = function (id, initialValue) {
    if (initialValue === void 0) { initialValue = null; }
    return {
        type: 'VariableDeclarator',
        id: id,
        init: initialValue
    };
};
exports.createVariableDeclarator = createVariableDeclarator;
var createVariableDeclaration = function (declarations, kind) {
    return {
        type: 'VariableDeclaration',
        declarations: declarations,
        kind: kind
    };
};
exports.createVariableDeclaration = createVariableDeclaration;
var createReturnStatement = function (argument) {
    return {
        type: 'ReturnStatement',
        argument: argument
    };
};
exports.createReturnStatement = createReturnStatement;
var createFunctionDeclaration = function (name, params, body) {
    return {
        type: 'FunctionDeclaration',
        expression: false,
        generator: false,
        id: {
            type: 'Identifier',
            name: name
        },
        params: params,
        body: {
            type: 'BlockStatement',
            body: body
        }
        // The 'expression' property is not typed in ESTree, but it exists
        // on FunctionDeclaration nodes in the AST generated by acorn parser.
    };
};
exports.createFunctionDeclaration = createFunctionDeclaration;
var createImportDeclaration = function (specifiers, source) {
    return {
        type: 'ImportDeclaration',
        specifiers: specifiers,
        source: source
    };
};
exports.createImportDeclaration = createImportDeclaration;
var createImportSpecifier = function (local, imported) {
    return {
        type: 'ImportSpecifier',
        local: local,
        imported: imported
    };
};
exports.createImportSpecifier = createImportSpecifier;
var createImportDefaultSpecifier = function (local) {
    return {
        type: 'ImportDefaultSpecifier',
        local: local
    };
};
exports.createImportDefaultSpecifier = createImportDefaultSpecifier;
var createImportNamespaceSpecifier = function (local) {
    return {
        type: 'ImportNamespaceSpecifier',
        local: local
    };
};
exports.createImportNamespaceSpecifier = createImportNamespaceSpecifier;
