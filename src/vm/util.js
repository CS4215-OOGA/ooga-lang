"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringifyProgram = exports.getName = void 0;
var opcodes_1 = require("./opcodes");
var OPCODES_STR = (_a = {},
    _a[opcodes_1.OpCodes.NOP] = 'NOP   ',
    _a[opcodes_1.OpCodes.LDCI] = 'LDCI  ',
    _a[opcodes_1.OpCodes.LGCI] = 'LGCI  ',
    _a[opcodes_1.OpCodes.LDCF32] = 'LDCF32',
    _a[opcodes_1.OpCodes.LGCF32] = 'LGCF32',
    _a[opcodes_1.OpCodes.LDCF64] = 'LDCF64',
    _a[opcodes_1.OpCodes.LGCF64] = 'LGCF64',
    _a[opcodes_1.OpCodes.LDCB0] = 'LDCB0 ',
    _a[opcodes_1.OpCodes.LDCB1] = 'LDCB1 ',
    _a[opcodes_1.OpCodes.LGCB0] = 'LGCB0 ',
    _a[opcodes_1.OpCodes.LGCB1] = 'LGCB1 ',
    _a[opcodes_1.OpCodes.LGCU] = 'LGCU  ',
    _a[opcodes_1.OpCodes.LGCN] = 'LGCN  ',
    _a[opcodes_1.OpCodes.LGCS] = 'LGCS  ',
    _a[opcodes_1.OpCodes.POPG] = 'POPG  ',
    _a[opcodes_1.OpCodes.POPB] = 'POPB  ',
    _a[opcodes_1.OpCodes.POPF] = 'POPF  ',
    _a[opcodes_1.OpCodes.ADDG] = 'ADDG  ',
    _a[opcodes_1.OpCodes.ADDF] = 'ADDF  ',
    _a[opcodes_1.OpCodes.SUBG] = 'SUBG  ',
    _a[opcodes_1.OpCodes.SUBF] = 'SUBF  ',
    _a[opcodes_1.OpCodes.MULG] = 'MULG  ',
    _a[opcodes_1.OpCodes.MULF] = 'MULF  ',
    _a[opcodes_1.OpCodes.DIVG] = 'DIVG  ',
    _a[opcodes_1.OpCodes.DIVF] = 'DIVF  ',
    _a[opcodes_1.OpCodes.MODG] = 'MODG  ',
    _a[opcodes_1.OpCodes.MODF] = 'MODF  ',
    _a[opcodes_1.OpCodes.NEGG] = 'NEGG  ',
    _a[opcodes_1.OpCodes.NEGF] = 'NEGF  ',
    _a[opcodes_1.OpCodes.NOTG] = 'NOTG  ',
    _a[opcodes_1.OpCodes.NOTB] = 'NOTB  ',
    _a[opcodes_1.OpCodes.LTG] = 'LTG   ',
    _a[opcodes_1.OpCodes.LTF] = 'LTF   ',
    _a[opcodes_1.OpCodes.GTG] = 'GTG   ',
    _a[opcodes_1.OpCodes.GTF] = 'GTF   ',
    _a[opcodes_1.OpCodes.LEG] = 'LEG   ',
    _a[opcodes_1.OpCodes.LEF] = 'LEF   ',
    _a[opcodes_1.OpCodes.GEG] = 'GEG   ',
    _a[opcodes_1.OpCodes.GEF] = 'GEF   ',
    _a[opcodes_1.OpCodes.EQG] = 'EQG   ',
    _a[opcodes_1.OpCodes.EQF] = 'EQF   ',
    _a[opcodes_1.OpCodes.EQB] = 'EQB   ',
    _a[opcodes_1.OpCodes.NEQG] = 'NEQG  ',
    _a[opcodes_1.OpCodes.NEQF] = 'NEQF  ',
    _a[opcodes_1.OpCodes.NEQB] = 'NEQB  ',
    _a[opcodes_1.OpCodes.NEWC] = 'NEWC  ',
    _a[opcodes_1.OpCodes.NEWA] = 'NEWA  ',
    _a[opcodes_1.OpCodes.LDLG] = 'LDLG  ',
    _a[opcodes_1.OpCodes.LDLF] = 'LDLF  ',
    _a[opcodes_1.OpCodes.LDLB] = 'LDLB  ',
    _a[opcodes_1.OpCodes.STLG] = 'STLG  ',
    _a[opcodes_1.OpCodes.STLB] = 'STLB  ',
    _a[opcodes_1.OpCodes.STLF] = 'STLF  ',
    _a[opcodes_1.OpCodes.LDPG] = 'LDPG  ',
    _a[opcodes_1.OpCodes.LDPF] = 'LDPF  ',
    _a[opcodes_1.OpCodes.LDPB] = 'LDPB  ',
    _a[opcodes_1.OpCodes.STPG] = 'STPG  ',
    _a[opcodes_1.OpCodes.STPB] = 'STPB  ',
    _a[opcodes_1.OpCodes.STPF] = 'STPF  ',
    _a[opcodes_1.OpCodes.LDAG] = 'LDAG  ',
    _a[opcodes_1.OpCodes.LDAB] = 'LDAB  ',
    _a[opcodes_1.OpCodes.LDAF] = 'LDAF  ',
    _a[opcodes_1.OpCodes.STAG] = 'STAG  ',
    _a[opcodes_1.OpCodes.STAB] = 'STAB  ',
    _a[opcodes_1.OpCodes.STAF] = 'STAF  ',
    _a[opcodes_1.OpCodes.BRT] = 'BRT   ',
    _a[opcodes_1.OpCodes.BRF] = 'BRF   ',
    _a[opcodes_1.OpCodes.BR] = 'BR    ',
    _a[opcodes_1.OpCodes.JMP] = 'JMP   ',
    _a[opcodes_1.OpCodes.CALL] = 'CALL  ',
    _a[opcodes_1.OpCodes.CALLT] = 'CALLT ',
    _a[opcodes_1.OpCodes.CALLP] = 'CALLP ',
    _a[opcodes_1.OpCodes.CALLTP] = 'CALLTP',
    _a[opcodes_1.OpCodes.CALLV] = 'CALLV ',
    _a[opcodes_1.OpCodes.CALLTV] = 'CALLTV',
    _a[opcodes_1.OpCodes.RETG] = 'RETG  ',
    _a[opcodes_1.OpCodes.RETF] = 'RETF  ',
    _a[opcodes_1.OpCodes.RETB] = 'RETB  ',
    _a[opcodes_1.OpCodes.RETU] = 'RETU  ',
    _a[opcodes_1.OpCodes.RETN] = 'RETN  ',
    _a[opcodes_1.OpCodes.DUP] = 'DUP   ',
    _a[opcodes_1.OpCodes.NEWENV] = 'NEWENV',
    _a[opcodes_1.OpCodes.POPENV] = 'POPENV',
    _a[opcodes_1.OpCodes.NEWCP] = 'NEWCP ',
    _a[opcodes_1.OpCodes.NEWCV] = 'NEWCV ',
    _a[opcodes_1.OpCodes.NEGG] = 'NEGG  ',
    _a[opcodes_1.OpCodes.NEGF] = 'NEGF  ',
    _a[opcodes_1.OpCodes.NEQG] = 'NEQG  ',
    _a[opcodes_1.OpCodes.NEQF] = 'NEQF  ',
    _a[opcodes_1.OpCodes.NEQB] = 'NEQB  ',
    // custom opcodes
    _a[opcodes_1.OpCodes.ARRAY_LEN] = 'ARR_LEN',
    _a[opcodes_1.OpCodes.DISPLAY] = 'DISPLAY',
    _a[opcodes_1.OpCodes.DRAW_DATA] = 'DRAW_DATA',
    _a[opcodes_1.OpCodes.ERROR] = 'ERROR',
    _a[opcodes_1.OpCodes.IS_ARRAY] = 'IS_ARRAY',
    _a[opcodes_1.OpCodes.IS_BOOL] = 'IS_BOOL',
    _a[opcodes_1.OpCodes.IS_FUNC] = 'IS_FUNC',
    _a[opcodes_1.OpCodes.IS_NULL] = 'IS_NULL',
    _a[opcodes_1.OpCodes.IS_NUMBER] = 'IS_NUM',
    _a[opcodes_1.OpCodes.IS_STRING] = 'IS_STR',
    _a[opcodes_1.OpCodes.IS_UNDEFINED] = 'IS_UNDEF',
    _a[opcodes_1.OpCodes.MATH_ABS] = 'MATH_ABS',
    _a[opcodes_1.OpCodes.MATH_ACOS] = 'MATH_ACOS',
    _a[opcodes_1.OpCodes.MATH_ACOSH] = 'MATH_ACOSH',
    _a[opcodes_1.OpCodes.MATH_ASINH] = 'MATH_ASINH',
    _a[opcodes_1.OpCodes.MATH_ATAN] = 'MATH_ATAN',
    _a[opcodes_1.OpCodes.MATH_ATAN2] = 'MATH_ATAN2',
    _a[opcodes_1.OpCodes.MATH_ATANH] = 'MATH_ATANH',
    _a[opcodes_1.OpCodes.MATH_CBRT] = 'MATH_CBRT',
    _a[opcodes_1.OpCodes.MATH_CEIL] = 'MATH_CEIL',
    _a[opcodes_1.OpCodes.MATH_CLZ32] = 'MATH_CLZ32',
    _a[opcodes_1.OpCodes.MATH_COS] = 'MATH_COS',
    _a[opcodes_1.OpCodes.MATH_COSH] = 'MATH_COSH',
    _a[opcodes_1.OpCodes.MATH_EXP] = 'MATH_EXP',
    _a[opcodes_1.OpCodes.MATH_EXPM1] = 'MATH_EXPM1',
    _a[opcodes_1.OpCodes.MATH_FLOOR] = 'MATH_FLOOR',
    _a[opcodes_1.OpCodes.MATH_FROUND] = 'MATH_FROUND',
    _a[opcodes_1.OpCodes.MATH_HYPOT] = 'MATH_HYPOT',
    _a[opcodes_1.OpCodes.MATH_IMUL] = 'MATH_IMUL',
    _a[opcodes_1.OpCodes.MATH_LOG] = 'MATH_LOG',
    _a[opcodes_1.OpCodes.MATH_LOG1P] = 'MATH_LOG1P',
    _a[opcodes_1.OpCodes.MATH_LOG2] = 'MATH_LOG2',
    _a[opcodes_1.OpCodes.MATH_LOG10] = 'MATH_LOG10',
    _a[opcodes_1.OpCodes.MATH_MAX] = 'MATH_MAX',
    _a[opcodes_1.OpCodes.MATH_MIN] = 'MATH_MIN',
    _a[opcodes_1.OpCodes.MATH_POW] = 'MATH_POW',
    _a[opcodes_1.OpCodes.MATH_RANDOM] = 'MATH_RANDOM',
    _a[opcodes_1.OpCodes.MATH_ROUND] = 'MATH_ROUND',
    _a[opcodes_1.OpCodes.MATH_SIGN] = 'MATH_SIGN',
    _a[opcodes_1.OpCodes.MATH_SIN] = 'MATH_SIN',
    _a[opcodes_1.OpCodes.MATH_SINH] = 'MATH_SINH',
    _a[opcodes_1.OpCodes.MATH_SQRT] = 'MATH_SQRT',
    _a[opcodes_1.OpCodes.MATH_TAN] = 'MATH_TAN',
    _a[opcodes_1.OpCodes.MATH_TANH] = 'MATH_TANH',
    _a[opcodes_1.OpCodes.MATH_TRUNC] = 'MATH_TRUNC',
    _a[opcodes_1.OpCodes.PARSE_INT] = 'PARSE_INT',
    _a[opcodes_1.OpCodes.RUNTIME] = 'RUNTIME',
    _a[opcodes_1.OpCodes.STREAM] = 'STREAM',
    _a[opcodes_1.OpCodes.STRINGIFY] = 'STRINGIFY',
    _a[opcodes_1.OpCodes.PROMPT] = 'PROMPT',
    _a[opcodes_1.OpCodes.DISPLAY_LIST] = 'DISPLAY_LIST',
    _a[opcodes_1.OpCodes.CHAR_AT] = 'CHAR_AT',
    _a[opcodes_1.OpCodes.ARITY] = 'ARITY',
    // Concurrency Opcodes
    _a[opcodes_1.OpCodes.EXECUTE] = 'EXEC  ',
    _a[opcodes_1.OpCodes.TEST_AND_SET] = 'T&S   ',
    _a[opcodes_1.OpCodes.CLEAR] = 'CLEAR ',
    _a);
// get name of opcode for debugging
function getName(op) {
    return OPCODES_STR[op]; // need to add guard in case op does not exist
}
exports.getName = getName;
// pretty-print the program
function stringifyProgram(P) {
    var functions = P[1];
    var programStr = '';
    programStr += 'Entry function: ' + P[0] + '\n';
    for (var i = 0; i < functions.length; i++) {
        var f = functions[i];
        var s = '#' + i + ':\nStack Size: ' + f[0] + '\nEnv Size: ' + f[1] + '\nNum Args: ' + f[2] + '\n';
        for (var j = 0; j < f[3].length; j++) {
            s += j;
            var ins = f[3][j];
            s += ': ' + getName(ins[0]);
            for (var k = 1; k < ins.length; k++) {
                s += ' ' + ins[k];
            }
            s += '\n';
        }
        programStr += s + '\n';
    }
    return programStr;
}
exports.stringifyProgram = stringifyProgram;
