yarn run v1.22.22
$ node dist/vm/oogavm.js booga.ooga -o booga.bm
Initializing builtin
HELLO WORLD!!!!
Compiling: 
{
  tag: 'BlockStatement',
  body: { tag: 'SequenceStatement', body: [ [Object] ] }
}
OOGA
{
  tag: 'FunctionDeclaration',
  id: { tag: 'Name', name: 'foo', type: 'Null' },
  params: [ { tag: 'Name', name: 'y', type: 'Integer' } ],
  type: null,
  body: {
    tag: 'BlockStatement',
    body: { tag: 'SequenceStatement', body: [Array] }
  }
}
Compiling: 
{
  tag: 'SequenceStatement',
  body: [
    {
      tag: 'FunctionDeclaration',
      id: [Object],
      params: [Array],
      type: null,
      body: [Object]
    }
  ]
}
Compiling: 
{
  tag: 'FunctionDeclaration',
  id: { tag: 'Name', name: 'foo', type: 'Null' },
  params: [ { tag: 'Name', name: 'y', type: 'Integer' } ],
  type: null,
  body: {
    tag: 'BlockStatement',
    body: { tag: 'SequenceStatement', body: [Array] }
  }
}
Compiling: 
{
  tag: 'ConstantDeclaration',
  id: { tag: 'Name', name: 'foo', type: 'Null' },
  expression: {
    tag: 'LambdaDeclaration',
    params: [ [Object] ],
    body: { tag: 'BlockStatement', body: [Object] },
    type: null
  }
}
Compiling: 
{
  tag: 'LambdaDeclaration',
  params: [ { tag: 'Name', name: 'y', type: 'Integer' } ],
  body: {
    tag: 'BlockStatement',
    body: { tag: 'SequenceStatement', body: [Array] }
  },
  type: null
}
Compiling: 
{
  tag: 'BlockStatement',
  body: { tag: 'SequenceStatement', body: [ [Object] ] }
}
OOGA
{
  tag: 'CallExpression',
  callee: { tag: 'Name', name: 'foo', type: 'Null' },
  arguments: [
    {
      tag: 'BinaryExpression',
      operator: '-',
      left: [Object],
      right: [Object]
    }
  ]
}
Compiling: 
{
  tag: 'SequenceStatement',
  body: [ { tag: 'CallExpression', callee: [Object], arguments: [Array] } ]
}
Compiling: 
{
  tag: 'CallExpression',
  callee: { tag: 'Name', name: 'foo', type: 'Null' },
  arguments: [
    {
      tag: 'BinaryExpression',
      operator: '-',
      left: [Object],
      right: [Object]
    }
  ]
}
Compiling: 
{ tag: 'Name', name: 'foo', type: 'Null' }
Compiling: 
{
  tag: 'BinaryExpression',
  operator: '-',
  left: { tag: 'Name', name: 'y', type: 'Null' },
  right: { tag: 'Integer', value: 1 }
}
Compiling: 
{ tag: 'Name', name: 'y', type: 'Null' }
Compiling: 
{ tag: 'Integer', value: 1 }
Done in 0.16s.
